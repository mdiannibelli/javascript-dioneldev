//En la fábrica de juguetes del Polo Norte, cada juguete tiene un número de identificación único.
//Sin embargo, debido a un error en la máquina de juguetes, algunos números se han asignado a más de un juguete.
//¡Encuentra el primer número de identificación que se ha repetido, donde la segunda ocurrencia tenga el índice //más pequeño!
//En otras palabras, si hay más de un número repetido, debes devolver el número cuya segunda ocurrencia aparezca //primero en la lista. Si no hay números repetidos, devuelve -1.

// Primera forma (SET)
const findFirstRepeated = (gifts) => {
  let nums = new Set();
  for(let i = 0; i < gifts.length; i++) {
    const num = gifts[i];
    if(nums.has(num)) return num; 
    nums.add(num);
  }
  return -1;
}

// Segunda forma (object)
const findFirstRepeatedWobject = (gifts) => {
  let numbs = {};
  for(let i = 0; i < gifts.length; i++) {
    const num = gifts[i];
    if(numbs[num] !== undefined) return num;
    numbs[num] += num
  }
  return -1;
}

// Tercera forma array
function findFirstRepeatedArr(gifts) {
    const results = [];
    for (let i = 0; i < gifts.length; i++) {
        if(results.includes(gifts[i])) return gifts[i];

        results.push(gifts[i]);
    }
    return -1;
}



// TESTS !
const giftIds = [2, 1, 3, 5, 3, 2]
const firstRepeatedId = findFirstRepeatedWobject(giftIds)
console.log(firstRepeatedId) // 3
// Aunque el 2 y el 3 se repiten
// el 3 aparece primero por segunda vez

const giftIds2 = [1, 2, 3, 4]
const firstRepeatedId2 = findFirstRepeatedWobject(giftIds2)
console.log(firstRepeatedId2) // -1
// Es -1 ya que no se repite ningún número

const giftIds3 = [5, 1, 5, 1]
const firstRepeatedId3 = findFirstRepeated(giftIds3)
console.log(firstRepeatedId3) 